serviceTree: &serviceTree
  landscape: lapras
  platform: nitroso
  service: &service zinc
  layer: '2'

tags: &tags
  atomi.cloud/platform: nitroso
  atomi.cloud/service: zinc
  atomi.cloud/layer: '2'

bromine:
  serviceTree:
    <<: *serviceTree
  annotations:
    argocd.argoproj.io/sync-wave: '1'
  # -- Store name to create
  storeName: *service
  # -- Secret of Secrets reference
  rootSecret:
    name: *service
    # -- Infisical Token Reference
    ref:
      # -- Client ID
      clientId: NITROSO_ZINC_CLIENT_ID
      # -- Client Secret
      clientSecret: NITROSO_ZINC_CLIENT_SECRET

  target: &target zinc

api:
  enabled: true
  annotations:
    argocd.argoproj.io/sync-wave: '4'
    argocd.argoproj.io/hook: Sync
    drop_log: 'true'
  nameOverride: 'zinc-api'

  envFromSecret: *target

  serviceTree:
    <<: *serviceTree
    module: api

  imagePullSecrets: []

  replicaCount: 1

  appSettings:
    App:
      Mode: Server

  configMountPath: /app/Config

  image:
    repository: nitroso-zinc-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ''

  serviceAccount:
    create: false
    annotations: {}
    name: ''

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    type: ClusterIP
    port: 80
    containerPort: 9000

  ingress:
    enabled: true
    className: nginx
    hosts:
      - host: api.zinc.nitroso.lapras.lvh.me
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: sample
        issuerRef: sample
        hosts:
          - api.zinc.nitroso.lapras.lvh.me

  resources:
    limits:
      cpu: '1'
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi

  autoscaling: {}
  readinessProbe:
    periodSeconds: 30
    httpGet:
      path: /
      port: http

  livenessProbe:
    periodSeconds: 30
    httpGet:
      path: /
      port: http

  nodeSelector: {}

  tolerations: []

  affinity: {}

  topologySpreadConstraints: {}

migration:
  annotations:
    argocd.argoproj.io/sync-wave: '3'
    argocd.argoproj.io/hook: Sync
    drop_log: 'true'
  enabled: false

  nameOverride: 'zinc-migration'

  envFromSecret: *target

  serviceTree:
    <<: *serviceTree
    module: migration
  aspNetEnv: Development

  appSettings:
    App:
      Mode: Migration

  backoffLimit: 4

  configMountPath: /app/Config

  image:
    repository: nitroso-zinc-migration
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ''

  imagePullSecrets: []

  serviceAccount:
    create: false
    annotations: {}
    name: ''

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 1Gi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  topologySpreadConstraints: {}

maindb:
  nameOverride: zinc-maindb
  primary:
    persistence:
      enabled: false
  auth:
    database: nitroso-zinc
    username: admin
    password: supersecret

streamcache:
  nameOverride: zinc-streamcache
  commonAnnotations:
    <<: *tags
    atomi.cloud/module: streamcache
    argocd.argoproj.io/sync-wave: '2'
  commonLabels:
    <<: *tags
    atomi.cloud/module: streamcache
  podAnnotations:
    <<: *tags
    atomi.cloud/module: streamcache
    argocd.argoproj.io/sync-wave: '2'
  resources:
    requests:
      memory: '256Mi'
      cpu: '100m'
    limits:
      memory: '512Mi'
      cpu: '250m'

  architecture: standalone
  auth:
    enabled: true
    existingSecret: *target
    existingSecretPasswordKey: ATOMI_CACHE__STREAM__PASSWORD

  master:
    persistence:
      enabled: false

  replica:
    persistence:
      enabled: false

mainstorage:
  nameOverride: zinc-mainstorage
  persistence:
    enabled: false
    size: 10Gi
  ingress:
    enabled: true
    ingressClassName: traefik
    hostname: console-mainstorage.zinc.nitroso.lapras.lvh.me
  apiIngress:
    enabled: true
    ingressClassName: traefik
    hostname: mainstorage.zinc.nitroso.lapras.lvh.me
  auth:
    rootUser: admin
    rootPassword: supersecret
